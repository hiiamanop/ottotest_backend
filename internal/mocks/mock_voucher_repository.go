// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/voucher_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/hiiamanop/ottotest_backend/internal/domain/entity"
)

// MockVoucherRepository is a mock of VoucherRepository interface.
type MockVoucherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVoucherRepositoryMockRecorder
}

// MockVoucherRepositoryMockRecorder is the mock recorder for MockVoucherRepository.
type MockVoucherRepositoryMockRecorder struct {
	mock *MockVoucherRepository
}

// NewMockVoucherRepository creates a new mock instance.
func NewMockVoucherRepository(ctrl *gomock.Controller) *MockVoucherRepository {
	mock := &MockVoucherRepository{ctrl: ctrl}
	mock.recorder = &MockVoucherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoucherRepository) EXPECT() *MockVoucherRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVoucherRepository) Create(ctx context.Context, voucher *entity.Voucher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, voucher)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVoucherRepositoryMockRecorder) Create(ctx, voucher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoucherRepository)(nil).Create), ctx, voucher)
}

// FindByBrandID mocks base method.
func (m *MockVoucherRepository) FindByBrandID(ctx context.Context, brandID uint) ([]entity.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBrandID", ctx, brandID)
	ret0, _ := ret[0].([]entity.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBrandID indicates an expected call of FindByBrandID.
func (mr *MockVoucherRepositoryMockRecorder) FindByBrandID(ctx, brandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBrandID", reflect.TypeOf((*MockVoucherRepository)(nil).FindByBrandID), ctx, brandID)
}

// FindByID mocks base method.
func (m *MockVoucherRepository) FindByID(ctx context.Context, id uint) (*entity.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockVoucherRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockVoucherRepository)(nil).FindByID), ctx, id)
}
