// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/customer_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/hiiamanop/ottotest_backend/internal/domain/entity"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRepository) Create(ctx context.Context, c *entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRepositoryMockRecorder) Create(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRepository)(nil).Create), ctx, c)
}

// FindByID mocks base method.
func (m *MockCustomerRepository) FindByID(ctx context.Context, id uint) (*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCustomerRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCustomerRepository)(nil).FindByID), ctx, id)
}

// UpdatePointBalance mocks base method.
func (m *MockCustomerRepository) UpdatePointBalance(ctx context.Context, id uint, newBalance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePointBalance", ctx, id, newBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePointBalance indicates an expected call of UpdatePointBalance.
func (mr *MockCustomerRepositoryMockRecorder) UpdatePointBalance(ctx, id, newBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePointBalance", reflect.TypeOf((*MockCustomerRepository)(nil).UpdatePointBalance), ctx, id, newBalance)
}
